@page "/conferences"

@using TTConfTool.Shared.DTO
@using TTConfTool.Shared.Contracts
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IConferencesService _conferencesClient

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-12">
    <MudText Typo="Typo.h3" GutterBottom="true">Conferences</MudText>
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudIcon Icon="@Icons.Material.Filled.Refresh" @onclick="LoadConferences" />
        @if (_isRefreshing)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        <MudTable Items="_conferences" Hover="true" Elevation="3" Filter="new Func<Conference, bool>(FilterFunc)">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="color: white; background-color: #ff584f">Titel</MudTh>
                <MudTh Style="color: white; background-color: #ff584f">Ort</MudTh>
                <MudTh Style="color: white; background-color: #ff584f">Zeitraum</MudTh>
                <MudTh Style="color: white; background-color: #ff584f">Link</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Titel">@context.Title</MudTd>
                <MudTd DataLabel="Ort">@context.City</MudTd>
                <MudTd DataLabel="Zeitraum">@context.DateFrom.ToShortDateString() - @context.DateTo.ToShortDateString()</MudTd>
                <MudTd DataLabel="Link"><a href="@context.Url" target="_blank">@context.Url</a></MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Conference> _conferences = new List<Conference>();
    private string _searchString = String.Empty;
    private bool _isLoading = true;
    private bool _isRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadConferences();
    }

    private async Task LoadConferences()
    {
        if(!_isLoading)
        {
            _isRefreshing = true;
        }

        _conferences.Clear();
        _conferences = (await _conferencesClient.GetConferencesAsync());

        _isLoading = false;
        _isRefreshing = false;
    }

    private bool FilterFunc(Conference conference)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }

        if (conference.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }
}
